{"version":3,"file":"main-6zKjJZFm.js","sources":["../../src/config.js","../../src/MemoryGame.js","../../src/main.js"],"sourcesContent":["/**\n * Game configuration constants\n */\nexport const DEFAULT_CONFIG = {\n  duration: 1000,\n  cardSelector: '.js-cards',\n  shuffleDelay: 400,\n};\n\nexport const SELECTORS = {\n  cardsContainer: '.js-cards',\n  card: '.game__card',\n};\n\nexport const CSS_CLASSES = {\n  flipped: 'flipped',\n  matched: 'has-match',\n  noEvent: 'no-event',\n  srOnly: 'sr-only',\n};\n\nexport const ARIA = {\n  role: {\n    button: 'button',\n    status: 'status',\n  },\n  live: {\n    polite: 'polite',\n  },\n};\n","import { DEFAULT_CONFIG, CSS_CLASSES, ARIA } from './config.js';\n\n/**\n * MemoryGame class - Handles the memory matching game logic\n */\nexport class MemoryGame {\n  /**\n   * @param {Object} config - Configuration options\n   * @param {number} config.duration - Animation duration in ms\n   * @param {string} config.cardSelector - CSS selector for cards container\n   * @param {number} config.shuffleDelay - Delay before shuffle animation\n   */\n  constructor(config = {}) {\n    this.config = { ...DEFAULT_CONFIG, ...config };\n\n    // Initialize game state\n    this.gameState = {\n      moves: 0,\n      matches: 0,\n      isProcessing: false,\n    };\n\n    // Initialize DOM elements with error handling\n    this.cardsContainer = document.querySelector(this.config.cardSelector);\n\n    if (!this.cardsContainer) {\n      throw new Error(\n        `Cards container not found with selector: ${this.config.cardSelector}`\n      );\n    }\n\n    this.cards = Array.from(this.cardsContainer.children);\n\n    if (this.cards.length === 0) {\n      throw new Error('No cards found in the container');\n    }\n\n    this.init();\n  }\n\n  /**\n   * Initialize the game - set up event listeners\n   */\n  init() {\n    // Track if we've handled a touch event to prevent double-firing with click\n    let touchHandled = false;\n\n    /**\n     * Unified handler for both click and touch events\n     * @param {Event} event - The click or touch event\n     */\n    const handleCardInteraction = (event) => {\n      // For touch events, set flag and reset after a short delay\n      if (event.type === 'touchend') {\n        touchHandled = true;\n        setTimeout(() => {\n          touchHandled = false;\n        }, 500);\n      }\n\n      // Skip click events if touch was just handled (prevents double-firing)\n      if (event.type === 'click' && touchHandled) {\n        return;\n      }\n\n      const card = event.target.closest('.game__card');\n\n      if (card && this.canFlipCard(card)) {\n        // Prevent default touch behavior and event propagation\n        if (event.type === 'touchend') {\n          event.preventDefault();\n        }\n        this.flip(card);\n      }\n    };\n\n    // Use event delegation for better performance\n    // Add both click and touch event listeners for cross-device compatibility\n    this.cardsContainer.addEventListener('click', handleCardInteraction);\n    this.cardsContainer.addEventListener('touchend', handleCardInteraction);\n\n    // Add keyboard support for accessibility\n    this.cards.forEach((card, index) => {\n      card.setAttribute('tabindex', '0');\n      card.setAttribute('role', ARIA.role.button);\n      card.setAttribute('aria-label', `Card ${index + 1}`);\n\n      card.addEventListener('keydown', (event) => {\n        if (event.key === 'Enter' || event.key === ' ') {\n          event.preventDefault();\n          if (this.canFlipCard(card)) {\n            this.flip(card);\n          }\n        }\n      });\n    });\n  }\n\n  /**\n   * Check if a card can be flipped\n   * @param {HTMLElement} card - The card element\n   * @returns {boolean}\n   */\n  canFlipCard(card) {\n    return (\n      !card.classList.contains(CSS_CLASSES.flipped) &&\n      !card.classList.contains(CSS_CLASSES.matched) &&\n      !this.gameState.isProcessing\n    );\n  }\n\n  /**\n   * Shuffle all cards and reset the game\n   */\n  shuffleCards() {\n    this.cards.forEach((card) => {\n      const randomNumber = Math.floor(Math.random() * this.cards.length) + 1;\n\n      card.classList.remove(CSS_CLASSES.matched);\n      card.setAttribute('aria-label', `Card ${randomNumber}`);\n\n      setTimeout(() => {\n        card.style.order = `${randomNumber}`;\n      }, this.config.shuffleDelay);\n    });\n\n    // Reset game state\n    this.gameState.moves = 0;\n    this.gameState.matches = 0;\n\n    this.announceToScreenReader('Cards shuffled! New game started.');\n  }\n\n  /**\n   * Check if all cards have been matched\n   */\n  checkAllCards() {\n    if (!this.cards.every((card) => card.classList.contains(CSS_CLASSES.matched))) {\n      return;\n    }\n\n    this.announceToScreenReader(\n      `Congratulations! All cards matched in ${this.gameState.moves} moves!`\n    );\n\n    setTimeout(() => {\n      this.shuffleCards();\n    }, this.config.duration);\n  }\n\n  /**\n   * Temporarily disable card interactions\n   */\n  stopEvent() {\n    this.gameState.isProcessing = true;\n    this.cardsContainer.classList.add(CSS_CLASSES.noEvent);\n\n    setTimeout(() => {\n      this.cardsContainer.classList.remove(CSS_CLASSES.noEvent);\n      this.gameState.isProcessing = false;\n    }, this.config.duration);\n  }\n\n  /**\n   * Check if two cards match\n   * @param {HTMLElement} firstCard - First card to compare\n   * @param {HTMLElement} secondCard - Second card to compare\n   */\n  checkIfMatched(firstCard, secondCard) {\n    const firstAnimal = firstCard.dataset.animal;\n    const secondAnimal = secondCard.dataset.animal;\n\n    if (firstAnimal === secondAnimal) {\n      firstCard.classList.remove(CSS_CLASSES.flipped);\n      secondCard.classList.remove(CSS_CLASSES.flipped);\n\n      firstCard.classList.add(CSS_CLASSES.matched);\n      secondCard.classList.add(CSS_CLASSES.matched);\n\n      firstCard.setAttribute('aria-label', `Card matched: ${firstAnimal}`);\n      secondCard.setAttribute('aria-label', `Card matched: ${secondAnimal}`);\n\n      this.gameState.matches++;\n      this.announceToScreenReader(`Match found! ${this.gameState.matches} matches so far.`);\n\n      this.checkAllCards();\n    } else {\n      this.announceToScreenReader('No match. Cards will flip back.');\n\n      setTimeout(() => {\n        firstCard.classList.remove(CSS_CLASSES.flipped);\n        secondCard.classList.remove(CSS_CLASSES.flipped);\n      }, this.config.duration);\n    }\n  }\n\n  /**\n   * Flip a card\n   * @param {HTMLElement} selectedCard - The card to flip\n   */\n  flip(selectedCard) {\n    selectedCard.classList.add(CSS_CLASSES.flipped);\n    this.gameState.moves++;\n\n    const flippedCards = this.cards.filter((card) =>\n      card.classList.contains(CSS_CLASSES.flipped)\n    );\n\n    if (flippedCards.length === 2) {\n      this.stopEvent();\n      this.checkIfMatched(flippedCards[0], flippedCards[1]);\n    }\n  }\n\n  /**\n   * Announce message to screen readers\n   * @param {string} message - Message to announce\n   */\n  announceToScreenReader(message) {\n    const announcement = document.createElement('div');\n    announcement.setAttribute('role', ARIA.role.status);\n    announcement.setAttribute('aria-live', ARIA.live.polite);\n    announcement.className = CSS_CLASSES.srOnly;\n    announcement.textContent = message;\n\n    document.body.appendChild(announcement);\n\n    setTimeout(() => {\n      document.body.removeChild(announcement);\n    }, 1000);\n  }\n\n  /**\n   * Get current game statistics\n   * @returns {Object} Game statistics\n   */\n  getStats() {\n    return {\n      moves: this.gameState.moves,\n      matches: this.gameState.matches,\n      totalPairs: this.cards.length / 2,\n      isComplete: this.cards.every((card) => card.classList.contains(CSS_CLASSES.matched)),\n    };\n  }\n\n  /**\n   * Reset the game\n   */\n  reset() {\n    this.shuffleCards();\n  }\n}\n","import { MemoryGame } from './MemoryGame.js';\n\n/**\n * Initialize the memory game\n */\nfunction initGame() {\n  try {\n    const game = new MemoryGame();\n\n    // Expose game instance for debugging in development\n    if (import.meta.env.DEV) {\n      window.memoryGame = game;\n      console.log('Memory game initialized. Access via window.memoryGame');\n    }\n\n    return game;\n  } catch (error) {\n    console.error('Failed to initialize game:', error);\n    alert('Failed to start the game. Please refresh the page.');\n    throw error;\n  }\n}\n\n// Initialize the game when DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', initGame);\n} else {\n  initGame();\n}\n\nexport { initGame };\n"],"names":["DEFAULT_CONFIG","CSS_CLASSES","ARIA","MemoryGame","config","touchHandled","handleCardInteraction","event","card","index","randomNumber","firstCard","secondCard","firstAnimal","secondAnimal","selectedCard","flippedCards","message","announcement","initGame","error"],"mappings":"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"}